// android/app/build.gradle
plugins {
    id "com.android.application"
    id "kotlin-android"
    id "dev.flutter.flutter-gradle-plugin"
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode') ?: '1'
def flutterVersionName = localProperties.getProperty('flutter.versionName') ?: '1.0'

// --- Keystore ---
def keyProperties = new Properties()
def keyPropertiesFile = rootProject.file('key.properties')
if (keyPropertiesFile.exists()) {
    keyProperties.load(new FileInputStream(keyPropertiesFile))
}

android {
    namespace "tavasoli.reza.flutter_hangman"

    // Use Android 36 to satisfy plugin requirements
    compileSdkVersion 36
    ndkVersion "26.3.11579264"

    defaultConfig {
        applicationId "rumen.mazhdrakov_hangman"
        minSdkVersion flutter.minSdkVersion
        targetSdkVersion 36
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
    }

    // AGP 8.6 / Gradle 8.7 -> Java 17 toolchain
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlinOptions { jvmTarget = '17' }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    // Modern JNI packaging
    packagingOptions {
        jniLibs { useLegacyPackaging = false }
    }

    signingConfigs {
        release {
            if (keyPropertiesFile.exists()) {
                storeFile file(keyProperties['storeFile'])
                storePassword keyProperties['storePassword']
                keyAlias keyProperties['keyAlias']
                keyPassword keyProperties['keyPassword']
            }
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            // minifyEnabled true
            // shrinkResources true
            // proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    // no manual deps needed; Flutter/Plugins handle them
}
